# Import # Telegram-bot-api 12.8.0      pymongo[srv]    Binary   PIL
from pymongo import MongoClient

import os

import cv2
import numpy

import telebot

import logging
import time
import random

from keyboard import *

from bot_config import TG_TOKEN
from bot_config import MONGODB_LINK
from bot_config import MONGO_DB

from telegram import Bot
from telegram import Update
from telegram import ReplyKeyboardMarkup
from telegram import KeyboardButton
from telegram import ReplyKeyboardRemove
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler
from telegram.ext import Updater
from telegram.ext import CommandHandler
from telegram.ext import MessageHandler
from telegram.ext import Filters
from telegram.ext import CallbackContext

bot = telebot.TeleBot(TG_TOKEN, parse_mode=None)
# Connect to DataBase
mondb = MongoClient(MONGODB_LINK)[MONGO_DB]


def on_start(update: Update, context: CallbackContext):
    message = update.message
    user = mondb.Valentia22_users.find_one({"user_id": message.chat.id})
    logging.info(message.chat.id)
    if not user:
        message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É!',
            reply_markup=REPLY_KEYBOARD_MARKUP
        )
    else:
        if user.get('anket_done') == False:
            message.reply_text(
                text="–í–Ω–∏–º–∞–Ω–∏–µ!\
                –í—Å–µ —Å–æ–±–∏—Ä–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º–∏, –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç —Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏—é –∏ –±—É–¥—É—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –ò–≤–µ–Ω—Ç–∞",
            )
            message.reply_text(
                text="–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤! \n–í–∞—à –ø–æ–ª:",
                reply_markup=get_anket_gender()
            )
        else:
            message.reply_text(
                "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é: ",
                reply_markup=get_main_menu()
            )

def comm_advert(update: Update, context: CallbackContext):
    ad = update.message.text
    user = mondb.users.find_one({"user_id": update.message.chat_id})
    if user['user_phone'] == 7072917226:
        for v_user in mondb.Valentia22_users.find():
            context.bot.send_message(
                chat_id=v_user.get("user_id"),
                text=ad[8:],
            )

def get_photo(update: Update, context: CallbackContext):
    user = mondb.Valentia22_users.find_one({"user_id": update.message.chat.id})
    query = update.callback_query
    if user.get('user_photo') is not None:
        if user.get('user_photo') == "need":
            fileID = update.message.photo[-1].file_id
            file_info = bot.get_file(fileID)
            downloaded_file = bot.download_file(file_info.file_path)
            with open("user_photos/" + str(user['user_id']) + ".jpg", 'wb') as new_file:
                new_file.write(downloaded_file)

            mondb.Valentia22_users.update_one(
                {'_id': user['_id']},
                {'$set': {'user_photo': "user_photos/" + str(user['user_id']) + ".jpg",
                          }
                 })

            context.bot.send_message(
                chat_id=user['user_id'],
                text="–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
                reply_markup=ReplyKeyboardRemove(),
            )
            context.bot.send_message(
                chat_id=user['user_id'],
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu(),
            )

# IF user message == contact
def on_contact(update: Update, context: CallbackContext):
    message = update.message
    user = mondb.Valentia22_users.find_one({"user_id": message.chat.id})
    user_phone_number = 0
    user_chat_id = 0
    # IF user get another Contact
    if message.chat_id == int(message.contact['user_id']):
        if message.contact:
            if user is None:
                num1 = str(message.contact['phone_number'])
                user_phone_number = 0

                for i in range(-10, 0):
                    user_phone_number += int(num1[i]) * (10 ** ((i + 1) * -1))
                user_chat_id += int(message.contact['user_id'])

                mondb.Valentia22_users.insert_one(
                    {'user_id': user_chat_id,
                     'user_phone': user_phone_number,
                     'anket_done': False,
                     'chat_history': " ",
                     'status': 0}
                )

                message.reply_text(
                    '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!',
                    reply_markup=ReplyKeyboardRemove()
                )
                anket_answer_start(message)
            elif not user.get('anket_done'):
                anket_answer_start(message)
            else:
                message.reply_text(
                    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\
                    \n–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:',
                    reply_markup=get_main_menu()
                )
    else:
        message.reply_text(
            '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞! –£–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç UserID.',
            reply_markup=ReplyKeyboardRemove()
        )

def anket_answer_start(message):
    message.reply_text(
        text="–í–Ω–∏–º–∞–Ω–∏–µ!\
        –í—Å–µ —Å–æ–±–∏—Ä–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º–∏, –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç —Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏—é –∏ –±—É–¥—É—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –ò–≤–µ–Ω—Ç–∞",
    )
    message.reply_text(
        text="–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤! \n–í–∞—à –ø–æ–ª:",
        reply_markup=get_anket_gender()
    )

def handle_sticker(update: Update, context: CallbackContext):
    message = update.message
    user = mondb.Valentia22_users.find_one({"user_id": update.effective_message.chat_id})
    if user['status'] == 3:
        context.bot.send_sticker(user['partner'], update.message.sticker.file_id)
    elif user['status'] == 2:
        message.reply_text(
            text="–°—Ç–∏–∫–µ—Ä—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–±–∞ –ø–æ–¥–µ–ª—è—Ç—Å—è —Å–µ—Ä–¥–µ—á–∫–∞–º–∏",
        )

def handle_text(update: Update, context: CallbackContext):
    message = update.message
    query = update.callback_query
    user = mondb.Valentia22_users.find_one({"user_id": update.effective_message.chat_id})
    text = update.message.text
    
    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –Æ–∑–µ—Ä
    if user is None:
        return
    
    #–ü—Ä–∏–Ω—è—Ç–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    if user.get('user_photo') is not None and text == REPLY_BACK_MENU_FROM_PHOTO:
        if user.get('user_photo') == "need":
            mondb.Valentia22_users.update_one(
                {'_id': user['_id']},
                {'$set': {'user_photo': "no",
                          }
                 })
            message.reply_text(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                reply_markup=ReplyKeyboardRemove(),
            )
            message.reply_text(
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu()
            )
    
    heart_list = ["‚ù§Ô∏è", "<3", "üß°Ô∏è", "üíöÔ∏è", "üíô", "üíú", "üñ§Ô∏è", "ü§é", "ü§ç", "üíïÔ∏è", "üíû", "üíì", "‚ô•Ô∏è", ":heart:"]
    broken_heart_list = ["üíî", "stop", "STOP", "Stop"]

    #–í–æ –≤—Ä–µ–º—è –æ–±—â–µ–Ω–∏—è
    if user['status'] == 2 or user['status'] == 3:
        partn = mondb.Valentia22_users.find_one({"user_id": user['partner']})
        #–î–∑—ã–Ω—å –ª—é–¥–µ–π
        if text in heart_list and user['status'] == 2:
            if partn.get('like_partner') == 1:
                mondb.Valentia22_users.update_one(
                    {'_id': user['_id']},
                    {'$set': {'like_partner': 1,
                              'status': 3}}
                )
                mondb.Valentia22_users.update_one(
                    {'_id': partn['_id']},
                    {'$set': {'status': 3}}
                )

                dzin_msg_text = "–î–∑—ã–Ω—å! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∞ —Ç–∞–∫ –∂–µ —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∏–∫–µ—Ä—ã!" 
                message.reply_text(
                    text=dzin_msg_text,
                )

                context.bot.send_message(
                    chat_id=user['partner'],
                    text=dzin_msg_text,
                )

                if user.get('user_photo') is not None:
                    if user.get('user_photo') != "no" and user.get('user_photo') != "need":
                        context.bot.sendPhoto(chat_id=user['partner'],
                                              photo=open(file=user.get('user_photo'), mode='rb'))

                if partn.get('user_photo') is not None:
                    if partn.get('user_photo') != "no" and partn.get('user_photo') != "need":
                        context.bot.sendPhoto(chat_id=partn['partner'],
                                              photo=open(file=partn.get('user_photo'), mode='rb'))
            else:
                mondb.Valentia22_users.update_one(
                    {'_id': user['_id']},
                    {'$set': {'like_partner': 1}}
                )
        #–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–∞—Ä—ã
        elif text in broken_heart_list:
            mondb.Valentia22_users.update_one(
                {'_id': user['_id']},
                {'$set': {'status': 1,
                          'partner': 0}}
            )
            context.bot.send_message(
                chat_id=user['partner'],
                text=user['user_avatar'] + " –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É...",
                reply_markup=bad_re_search(),
            )

            mondb.Valentia22_users.update_one(
                {'_id': partn['_id']},
                {'$set': {'status': 0,
                          'partner': 0}}
            )
            message.reply_text(
                text="–ü–æ–∏—Å–∫ –Ω–∞—á–∞–ª—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ...",
                reply_markup=get_stop_search()
            )
            find_pair = find_pair_in_base(user)
            if find_pair is not None:
                if connect_users(user, find_pair['user_id']):
                    query.edit_message_text(
                        text="–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!",
                    )
                    message.reply_text(
                        text="–ü—Å—Å.. –Ω–µ –∑–Ω–∞–µ—à—å –æ —á–µ–º —Å–ø—Ä–æ—Å–∏—Ç—å? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É! ",
                        reply_markup=get_random_question(),
                    )
                    context.bot.send_sticker(user['chat_id'],
                                             'CAACAgEAAxkBAAICEmAlJqETd9jQMM4j6xYSmVHgzu04AAJ1AAPArAgjbBAAAXUaHGOjHgQ')

                    context.bot.send_message(
                        chat_id=find_pair['user_id'],
                        text="–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!",
                    )
                    context.bot.send_message(
                        chat_id=find_pair['user_id'],
                        text="–ü—Å—Å.. –Ω–µ –∑–Ω–∞–µ—à—å –æ —á–µ–º —Å–ø—Ä–æ—Å–∏—Ç—å? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É! ",
                        reply_markup=get_random_question(),
                    )
                    context.bot.send_sticker(find_pair['user_id'],
                                             'CAACAgEAAxkBAAICEmAlJqETd9jQMM4j6xYSmVHgzu04AAJ1AAPArAgjbBAAAXUaHGOjHgQ')
                    if user['status'] == 2:
                        if user.get('user_photo') is not None:
                            if user.get('user_photo') != "no" and user.get('user_photo') != "need":
                                src = cv2.imread(user.get('user_photo'), cv2.IMREAD_UNCHANGED)
                                gaussian_blur = cv2.GaussianBlur(src, (49, 49), sigmaX=49)
                                # save image
                                status = cv2.imwrite("full_blured_" + user.get('user_photo'), gaussian_blur)
                                print("Image written to file-system : ", status)

                                context.bot.sendPhoto(chat_id=partn.get('user_id'),
                                                    photo=open(file="full_blured_" + user.get('user_photo'), mode='rb'))
                                os.remove("full_blured_" + user.get('user_photo'))

                        if partn.get('user_photo') is not None:
                            if partn.get('user_photo') != "no" and partn.get('user_photo') != "need":
                                src = cv2.imread(partn.get('user_photo'), cv2.IMREAD_UNCHANGED)
                                gaussian_blur = cv2.GaussianBlur(src, (49, 49), sigmaX=49)
                                # save image
                                status = cv2.imwrite("full_blured_" + partn.get('user_photo'), gaussian_blur)
                                print("Image written to file-system : ", status)
                                context.bot.sendPhoto(chat_id=user.get('user_id'),
                                                    photo=open(file="full_blured_" + partn.get('user_photo'), mode='rb'))
                                os.remove("full_blured_" + partn.get('user_photo'))
        #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–∏
        elif user['left_message'] > 0 and user['status'] == 2:
            context.bot.send_message(
                chat_id=user['partner'],
                text=user['user_avatar'] + " :  " + text,
            )
            mondb.Valentia22_users.update_one(
                {'_id': user['_id']},
                {'$set': {'left_message': user['left_message'] - 1}}
            )
        #–î–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞
        elif user['status'] == 2:
            msg_txt = "–æ–Ω–∞" if partn['user_gender'] == 0 else "–æ–Ω"
            message.reply_text(
                text="–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π! –û—Ç–ø—Ä–∞–≤—å—Ç–µ ‚ù§Ô∏è - –µ—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫,"
                     "–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ " + msg_txt +
                     "—Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–µ—Ä–¥–µ—á–∫–æ, —Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π",
                reply_markup=re_search()
            )
        else:
            context.bot.send_message(
                chat_id=user['partner'],
                text=user['user_avatar'] + ": " + text,
            )
    elif user['status'] == 0 and user.get('user_avatar') is not None:
        if user.get('user_avatar') == "NeedXemo":
            if update.message.text == "üé© –®–ª—è–ø–Ω–∏–∫" or update.message.text == "üé©üòª –ö–æ—Ç–∏–∫ –≤ —à–ª—è–ø–µ":
                message.reply_text(
                    '–£–ø—Å, –ù–µ–ª—å–∑—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è —ç—Ç–∏–º –∏–º–µ–Ω–µ–º!'
                )
            else: 
                mondb.Valentia22_users.update_one(
                    {'_id': user['_id']},
                    {'$set': {'user_avatar': update.message.text}}
                )
            mes_text = " "
            if user.get('user_gender') == 0:
                mes_text += "{0}\n".format("–ñ–µ–Ω—Å–∫–∏–π")
            elif user.get('user_gender') == 1:
                mes_text += "{0}\n".format("–ú—É–∂—Å–∫–æ–π")
            elif user.get('user_gender') == 2:
                mes_text += "{0}\n".format("–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            else:
                message.reply_text(
                    '–û—à–∏–±–∫–∞!\n '
                    '–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è —Å–æ–æ–±—â–∏—Ç–µ –æ –Ω–µ–π '
                    '@MON0makh',
                    reply_markup=get_anket_gender()
                )

            mes_text += "–í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç: "
            if user.get('user_partn') == 0:
                mes_text += "{0}\n".format("–ü–∞—Ä–Ω–∏")
            elif user.get('user_partn') == 1:
                mes_text += "{0}\n".format("–î–µ–≤—É—à–∫–∏")
            elif user.get('user_partn') == 2:
                mes_text += "{0}\n".format("–û–±–∞")
            else:
                message.reply_text(
                    '–û—à–∏–±–∫–∞!\n '
                    '–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è —Å–æ–æ–±—â–∏—Ç–µ –æ –Ω–µ–π '
                    '@MON0makh',
                    reply_markup=get_anket_gender()
                )

            mes_text += "–í—ã –Ω–∞: "
            if user.get('user_course') == 1:
                mes_text += "{}\n".format("1-2 –∫—É—Ä—Å–µ –æ–±—É—á–µ–Ω–∏—è")
            elif user.get('user_course') == 2:
                mes_text += "{}\n".format("3-5 –∫—É—Ä—Å–µ –æ–±—É—á–µ–Ω–∏—è")
            else:
                message.reply_text(
                    '–û—à–∏–±–∫–∞!\n '
                    '–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è —Å–æ–æ–±—â–∏—Ç–µ –æ –Ω–µ–π '
                    '@MON0makh',
                    reply_markup=get_anket_gender()
                )
            message.reply_text(
                text="–í—Å–µ –≥–æ—Ç–æ–≤–æ!\n{0}\n–í–∞—à –ø–æ–ª: {1}".format(update.effective_message.text, mes_text),
                reply_markup=get_anket_confirm(),
            )

# Telegram inline menu buttons handler
def keyboard_call_handler(update: Update, context: CallbackContext):
    message = update.message
    query = update.callback_query
    data = query.data
    user = mondb.Valentia22_users.find_one({"user_id": update.effective_message.chat_id})

    if data == CALLBACK_ANKET_GIRL or \
            data == CALLBACK_ANKET_BOY or \
            data == CALLBACK_ANKET_ANOTHER:

        if data == CALLBACK_ANKET_GIRL:
            mondb.Valentia22_users.update_one(
                {'_id': user['_id']},
                {'$set': {'user_gender': 0}}
            )
        elif data == CALLBACK_ANKET_BOY:
            mondb.Valentia22_users.update_one(
                {'_id': user['_id']},
                {'$set': {'user_gender': 1}}
            )

        else:
            mondb.Valentia22_users.update_one(
                {'_id': user['_id']},
                {'$set': {'user_gender': 2}}
            )

        query.edit_message_text(
            text="–ö–∞–∫–æ–π –ø–æ–ª –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ",
            reply_markup=get_anket_partner(),
        )
    elif data == CALLBACK_ANKET_PARTN_GIRL or \
            data == CALLBACK_ANKET_PARTN_BOY or \
            data == CALLBACK_ANKET_PARTN_DOUBLE:

        if data == CALLBACK_ANKET_PARTN_GIRL:
            mondb.Valentia22_users.update_one(
                {'_id': user['_id']},
                {'$set': {'user_partn': 0}}
            )
        elif data == CALLBACK_ANKET_PARTN_BOY:
            mondb.Valentia22_users.update_one(
                {'_id': user['_id']},
                {'$set': {'user_partn': 1}}
            )

        else:
            mondb.Valentia22_users.update_one(
                {'_id': user['_id']},
                {'$set': {'user_partn': 2}}
            )

        query.edit_message_text(
            text="–ù–∞ –∫–∞–∫–æ–º –≤—ã –∫—É—Ä—Å–µ –æ–±—É—á–µ–Ω–∏—è? ",
            reply_markup=get_anket_age(),
        )

    elif data == CALLBACK_ANKET_AGE_1 or \
            data == CALLBACK_ANKET_AGE_2:

        if data == CALLBACK_ANKET_AGE_1:
            mondb.Valentia22_users.update_one(
                {'_id': user['_id']},
                {'$set': {'user_course': 1}}
            )
        elif data == CALLBACK_ANKET_AGE_2:
            mondb.Valentia22_users.update_one(
                {'_id': user['_id']},
                {'$set': {'user_course': 2}}
            )

        mondb.Valentia22_users.update_one(
            {'_id': user['_id']},
            {'$set': {'user_avatar': "NeedXemo"}}
        )

        query.edit_message_text(
            text="–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∂–∏ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —è–≤–ª—è—Ç—Å—è –≤–∞—à–∏–º –∞–≤–∞—Ç–∞—Ä–æ–º:",
        )
    elif data == CALLBACK_ANKET_CONFIRM:

        mondb.Valentia22_users.update_one(
            {'_id': user['_id']},
            {'$set': {'anket_done': True}}
        )
        query.edit_message_text(
            text="–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
    elif data == CALLBACK_ANKET_DECONF:
        query.edit_message_text(
            text="–í–∞—à –ø–æ–ª:",
            reply_markup=get_anket_gender()
        )

    elif data == CALLBACK_OPEN_SEARCH:
        
        msg_txt = ""
        if user['status'] > 1:
            msg_txt = "‚ùóÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ‚ùóÔ∏è –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º! –ï—Å–ª–∏ –≤—ã –Ω–∞—á–Ω–µ—Ç–µ –ø–æ–∏—Å–∫ —Å–µ–π—á–∞—Å," \
                      "—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã! \n\n"

        query.edit_message_text(
            text=msg_txt + "–ü—Ä–∞–≤–∏–ª–∞! \n–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–º–Ω–∞—Ç—É —Å –¥—Ä—É–≥–∏–º –∞–Ω–æ–Ω–∏–º–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, "
                           "–≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –∞–Ω–æ–Ω–∏–º–Ω–æ 14 —Å–æ–æ–±—â–µ–Ω–∏–π. –û–Ω –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –∏–º–µ–µ—Ç —Ç–∞–∫–æ–µ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "
                           "—Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –∏—Å—á–µ—Ä–ø–∞–µ—Ç–µ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, —É –≤–∞—Å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å "
                           "'–æ—Å—Ç–∞–≤–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ' —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏ –µ—Å–ª–∏ –æ–Ω —Ç–æ–∂–µ –æ—Å—Ç–∞–≤–∏–ª —Å–µ—Ä–¥–µ—á–∫–æ –≤–∞–º, —Ç–æ –¥–ª—è –≤–∞—Å "
                           "–æ–±–æ–∏—Ö –æ—Ç–∫—Ä–æ—é—Ç—Å—è –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ. –í—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ "
                           "–ü–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º —Ñ–æ—Ç–æ, –≤ –Ω–∞—á–∞–ª–µ –æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–∏–ª—å–Ω–æ —Ä–∞–∑–º—ã—Ç—É—é –≤–µ—Ä—Å–∏—é "
                           "–≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, "
                           "–≤ —Å–ª—É—á–∞–µ '–î–∑—ã–Ω—å' (–û–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–¥–∞–ª–∏ —Å–µ—Ä–¥–µ—á–∫–æ –¥—Ä—É–≥ –¥—Ä—É–≥—É), —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å "
                           "—Ñ–æ—Ç–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ.",
            reply_markup=get_start_search(user.get('user_gender'))
        )
    elif data == CALLBACK_START_SEARCH or data == CALLBACK_RE_SEARCH:
        if user['status'] > 1:
            context.bot.send_message(
                chat_id=user['partner'],
                text=user['user_avatar'] + " –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É...",
                reply_markup=bad_re_search(),
            )
            mondb.Valentia22_users.update_one(
                {'_id': user['_id']},
                {'$set': {'status': 1,
                          'partner': 0}}
            )
            pair = mondb.Valentia22_users.find_one({"user_id": user['partner']})
            mondb.Valentia22_users.update_one(
                {'_id': pair['_id']},
                {'$set': {'status': 0,
                          'partner': 0}}
            )
        else:
            mondb.Valentia22_users.update_one(
                {'_id': user['_id']},
                {'$set': {'status': 1}}
            )
        query.edit_message_text(
            text="–ü–æ–∏—Å–∫ –Ω–∞—á–∞–ª—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ...",
            reply_markup=get_stop_search()
        )

        find_pair = find_pair_in_base(user)
        if find_pair is not None:
            if connect_users(user, find_pair['user_id']):
                query.edit_message_text(
                    text="–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!",
                )
                context.bot.send_message(
                    chat_id=user['user_id'],
                    text="–ü—Å—Å.. –Ω–µ –∑–Ω–∞–µ—à—å –æ —á–µ–º —Å–ø—Ä–æ—Å–∏—Ç—å? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É! ",
                    reply_markup=get_random_question(),
                )
                context.bot.send_sticker(user['user_id'],
                                         'CAACAgEAAxkBAAICEmAlJqETd9jQMM4j6xYSmVHgzu04AAJ1AAPArAgjbBAAAXUaHGOjHgQ')

                context.bot.send_message(
                    chat_id=find_pair['user_id'],
                    text="–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!",
                )
                context.bot.send_message(
                    chat_id=find_pair['user_id'],
                    text="–ü—Å—Å.. –Ω–µ –∑–Ω–∞–µ—à—å –æ —á–µ–º —Å–ø—Ä–æ—Å–∏—Ç—å? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É! ",
                    reply_markup=get_random_question(),
                )
                context.bot.send_sticker(find_pair['user_id'],
                                         'CAACAgEAAxkBAAICEmAlJqETd9jQMM4j6xYSmVHgzu04AAJ1AAPArAgjbBAAAXUaHGOjHgQ')
                
                if user.get('user_photo') is not None:
                    if user.get('user_photo') != "no" and user.get('user_photo') != "need":
                        src = cv2.imread(user.get('user_photo'), cv2.IMREAD_UNCHANGED)
                        gaussian_blur = cv2.GaussianBlur(src, (49, 49), sigmaX=49)
                        # save image
                        status = cv2.imwrite("full_blured_" + user.get('user_photo'), gaussian_blur)
                        print("Image written to file-system : ", status)

                        context.bot.sendPhoto(chat_id=find_pair.get('user_id'),
                                            photo=open(file="full_blured_" + user.get('user_photo'), mode='rb'))
                        os.remove("full_blured_" + user.get('user_photo'))
                

                if find_pair.get('user_photo') is not None:
                    if find_pair.get('user_photo') != "no" and find_pair.get('user_photo') != "need":
                        src = cv2.imread(find_pair.get('user_photo'), cv2.IMREAD_UNCHANGED)
                        gaussian_blur = cv2.GaussianBlur(src, (49, 49), sigmaX=49)
                        # save image
                        status = cv2.imwrite("full_blured_" + find_pair.get('user_photo'), gaussian_blur)
                        print("Image written to file-system : ", status)
                        context.bot.sendPhoto(chat_id=user.get('user_id'),
                                            photo=open(file="full_blured_" + find_pair.get('user_photo'), mode='rb'))
                        os.remove("full_blured_" + find_pair.get('user_photo'))
    elif data == CALLBACK_STOP_SEARCH:
        mondb.Valentia22_users.update_one(
            {'_id': user['_id']},
            {'$set': {'status': 0}}
        )
        query.edit_message_text(
            text="–ü—Ä–∞–≤–∏–ª–∞! \n–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–º–Ω–∞—Ç—É —Å –¥—Ä—É–≥–∏–º –∞–Ω–æ–Ω–∏–º–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, "
                 "–≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –∞–Ω–æ–Ω–∏–º–Ω–æ 14 —Å–æ–æ–±—â–µ–Ω–∏–π. –û–Ω –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –∏–º–µ–µ—Ç —Ç–∞–∫–æ–µ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "
                 "—Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –∏—Å—á–µ—Ä–ø–∞–µ—Ç–µ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, —É –≤–∞—Å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å '–æ—Å—Ç–∞–≤–∏—Ç—å "
                 "—Å–µ—Ä–¥–µ—á–∫–æ' —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏ –µ—Å–ª–∏ –æ–Ω —Ç–æ–∂–µ –æ—Å—Ç–∞–≤–∏–ª —Å–µ—Ä–¥–µ—á–∫–æ –≤–∞–º, —Ç–æ –¥–ª—è –≤–∞—Å –æ–±–æ–∏—Ö –æ—Ç–∫—Ä–æ—é—Ç—Å—è –≤–∞—à–∏ "
                 "–¥–∞–Ω–Ω—ã–µ, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ. –í—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –ü–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º —Ñ–æ—Ç–æ, "
                 "–≤ –Ω–∞—á–∞–ª–µ –æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–∏–ª—å–Ω–æ —Ä–∞–∑–º—ã—Ç—É—é –≤–µ—Ä—Å–∏—é –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, "
                 " –≤ —Å–ª—É—á–∞–µ '–î–∑—ã–Ω—å' (–û–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–¥–∞–ª–∏ —Å–µ—Ä–¥–µ—á–∫–æ "
                 "–¥—Ä—É–≥ –¥—Ä—É–≥—É), —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ.",
            reply_markup=get_start_search(user.get('user_gender'))
        )
    elif data == CALLBACK_BACK_MAIN_MENU:
        query.edit_message_text(
            text="–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
    elif data == CALLBACK_RETURN_TO_MAIN_MENU_FROM_CHAT:
        context.bot.send_message(
            chat_id=user['partner'],
            text=user['user_avatar'] + " –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É...",
            reply_markup=bad_re_search(),
        )
        mondb.Valentia22_users.update_one(
            {'_id': user['_id']},
            {'$set': {'status': 0,
                      'user_partn': 0}}
        )
        pair = mondb.Valentia22_users.find_one({"user_id": user['partner']})
        mondb.Valentia22_users.update_one(
            {'_id': pair['_id']},
            {'$set': {'status': 0,
                      'partner': 0}}
        )
        query.edit_message_text(
            text="–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
    elif data == CALLBACK_RANDOM_QUESTION:
        if user['status'] > 1:
            questions = ["–ö–∞–∫–æ–π –≤–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—á–µ—Ä?", "–° —á–µ–º —É –≤–∞—Å –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è –¥–µ—Ç—Å—Ç–≤–æ?",
                         "–ß—Ç–æ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∞ 10 –∏–∑ 10?", "–ê–Ω–∏–º–µ?", "–ö–∞–∫—É—é –º—É–∑—ã–∫—É –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
                         "–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã —Å—Ç–∞—Ç—å –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–º–∏? –í –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏?", "–î–µ–¥–ª–∞–π–Ω—ã –≥–æ—Ä—è—Ç?"
                                                                             "–õ—é–±–∏–º–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –≤ –ê–ª–º–∞—Ç–µ?",
                         "–ì–¥–µ –≤ –ê–ª–º–∞—Ç—ã –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è?",
                         "–ö—Ç–æ –≤–∞—à –ª—é–±–∏–º—ã–π –ø—Ä–µ–ø–æ–¥?", "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–æ–º–∞—à–Ω–µ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?",
                         "–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –∂–∏—Ç—å –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–µ?"
                         "–ù–∞–∞–∞–∞–∞–∑–∞–¥ –≤ –ø—Ä–æ—à–ª–æ–µ! –¢–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏—à–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã  –ï–ù–¢, —Ç–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è?",
                         "–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –≤–∞—à–µ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?",
                         "–ï—Å–ª–∏ –±—ã —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º —á–µ–ª–æ–≤–µ–∫—É, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–∏–¥–µ–≤—à–µ–≥–æ –∫–∏–Ω–æ. –ö–∞–∫–æ–π –±—ã —Ñ–∏–ª—å–º —ç—Ç–æ –±—ã–ª?",
                         "–ò–≥—Ä–∞–µ—Ç–µ –≤ –≤–∏–¥–µ–æ–∏–≥—Ä—ã?", "–°—Ç–∏–ø–µ–Ω–¥–∏—è –Ω–∞ –º–µ—Å—Ç–µ?", "–¢–≤–æ–π —Å–æ–≤–µ—Ç –ø–µ—Ä–≤–∞—à–∞–º",
                         "–†–∞—Ö–º–µ—Ç –∏–ª–∏ –†–∞–∫—Ö–º–µ—Ç?", "–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?",
                         "–ö–∞–∫–æ–π —Ä–∞–±–æ—Ç–æ–π –≤—ã –±—ã –Ω–∏–∫–æ–≥–¥–∞, –Ω–µ —Å–º–æ–≥–ª–∏ –±—ã –∑–∞–Ω–∏–º–∞—Ç—Å—è?"
                         "–ó–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Å–ø–æ—Ä—Ç–æ–º?", "–ó–û–ñ –∏–ª–∏ –Ω–µ –ó–û–ñ?", "–û–ø–∏—à–∏—Ç–µ —Å–µ–±—è –∑–∞ —Ç—Ä–∏ —Å–ª–æ–≤–∞!",
                         "–ê –≤–µ—Ä–∏—Ç–µ –ª–∏ –≤—ã –≤ –ª—é–±–æ–≤—å —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞?", "–ö–∞–∫–∏–µ –º–∏–ª–∞—à–∫–∏ ^^ \n–ö–æ—à–∫–∏ –∏–ª–∏ —Å–æ–±–∞—á–∫–∏?",
                         "–í–∞—à –ª—é–±–∏–º—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞?",
                         "–£–∂–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏–π –ò–ª–∞–Ω –ú–∞—Å–∫, –æ—Ç–ø—Ä–∞–≤–∏—Ç –ª—é–¥–µ–π –∫–æ–ª–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ú–∞—Ä—Å! –•–æ—Ç–µ–ª–∏ –±—ã –≤—ã, –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏ –∫–æ–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä–º–∞–∏?",
                         "–ö–∞–∫ –≤—ã —Å—á–∏—Ç–µ–∞—Ç–µ, –ª—é–±–æ–≤—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?",
                         "–ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤–∞–º –Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ —à–∫–æ–ª–µ?", "–ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –í–£–ó–µ?",
                         "–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Å–µ—Ä–∏–∞–ª?", "–ö–∞–∫—É—é –∫–Ω–∏–≥—É –≤—ã –ø—Ä–æ—á–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π?", "–í–µ—Ä–∏—Ç–µ –ª–∏ –≤—ã –≤ –≥–æ—Ä–æ—Å–∫–æ–ø?",
                         "–í—ã —Å–ª–∞–¥–∫–æ–µ–∂–∫–∏?", "–ß—Ç–æ –ª—É—á—à–µ? –î–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –∏–ª–∏ –ü–æ–ª—É—á–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏... ",
                         "–ó–∞–∫–æ–Ω—á–∏—Ç–µ —Ñ—Ä–∞–∑—É –ø–æ —Å–≤–æ–µ–º—É: –º–∏—Ä –±—ã–ª –±—ã –ª—É—á—à–µ, –µ—Å–ª–∏...",
                         "–ó–∞–∫–æ–Ω—á–∏—Ç–µ —Ñ—Ä–∞–∑—É –ø–æ —Å–æ–≤–µ–º—É: –°—Ç—Ä–∞–Ω–∞ –±—ã–ª–∞ –±—ã –ª—É—á—à–µ, –µ—Å–ª–∏..."
                         "–ó–∞–∫–æ–Ω—á–∏—Ç–µ —Ñ—Ä–∞–∑—É –ø–æ —Å–≤–æ–µ–º—É: –£–Ω–∏–≤–µ—Ä –±—ã–ª –±—ã –ª—É—á—à–µ, –µ—Å–ª–∏...", "–û–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ –û—á–Ω–æ–µ?"
                                                                                    "–ö–∞–∫–æ–π —É –≤–∞—Å –ª—é–±–∏–º—ã–π –≤–∏–¥ –∏—Å–∫—É—Å—Å—Ç–≤–∞?",
                         "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –ø–æ–∂–∞–ª—É–π—Å—Ç—è, –∫–∞–∫ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞?", "–ö–∞–∫–∏–µ —É –≤–∞—Å —Ö–æ–±–±–∏?",
                         "–ö–æ—Ñ–µ –∏–ª–∏ –ß–∞–π?", "–ß–µ—Ä–Ω—ã–π —á–∞–π –∏–ª–∏ –∑–µ–ª–µ–Ω—ã–π?", "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å—á–∞—Å—Ç—å–µ?",
                         "–ï—Å–ª–∏ –±—ã –≤—ã –º–æ–≥–ª–∏ –ø–µ—Ä–µ–≤–æ–ø–ª–æ—Ç–∏—Ç—Å—è –≤ –∂–∏–≤–æ—Ç–Ω–æ–µ, —Ç–æ –≤ –∫—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª?",
                         "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑ 144", "–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –Ω–∞ –±—É–∫–≤—É –ü...",
                         "–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π –ß–µ—Ä–Ω–æ-–±–µ–ª—ã–π —Ñ–∏–ª—å–º?", "–ï—Å–ª–∏ –±—ã –≤—ã –±—ã–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –∫–Ω–∏–≥–∏, —Ç–æ –∫–∞–∫–æ–π?"]

            rand_quest = random.randrange(len(questions))
            context.bot.send_message(
                chat_id=user['user_id'],
                text="üé© –®–ª—è–ø–Ω–∏–∫: " + questions[rand_quest],
            )
            context.bot.send_message(
                chat_id=user['partner'],
                text="üé© –®–ª—è–ø–Ω–∏–∫: " + questions[rand_quest],
            )
    elif data == CALLBACK_EDIT_MY_DATA:
        if user['status'] > 1:
            mondb.Valentia22_users.update_one(
                {'_id': user['_id']},
                {'$set': {'status': 0,
                          'partner': 0}}
            )
            pair = mondb.Valentia22_users.find_one({"user_id": user['partner']})
            mondb.Valentia22_users.update_one(
                {'_id': pair['_id']},
                {'$set': {'status': 0,
                          'partner': 0}}
            )
            context.bot.send_message(
                chat_id=user['partner'],
                text=user['user_avatar'] + " –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É...",
                reply_markup=bad_re_search(),
            )
        query.edit_message_text(
            text="–í–∞—à –ø–æ–ª:",
            reply_markup=get_anket_gender()
        )
    elif data == CALLBACK_CINEMA_NIGHT:
        query.edit_message_text(
            text="14 –§–µ–≤—Ä–∞–ª—è –≤ 23:30 –Ω–∞ Discord —Å–µ—Ä–≤–µ—Ä–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ HUB, –ø—Ä–æ–π–¥–µ—Ç —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∫–∏–Ω–æ–ø–æ–ª–Ω–æ—á—å!"
                 " –í—Ö–æ–¥ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö, –ø–∞—Ä–æ–π –∏–ª–∏ –≤ –æ–¥–∏–Ω–æ—á–∫—É, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∫–∏–Ω–æ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!",
            reply_markup=get_cinemanight()
        )
    elif data == CALLBACK_ADD_PHOTO:
        mondb.Valentia22_users.update_one(
            {'_id': user['_id']},
            {'$set': {'user_photo': "need",
                      }
             })

        context.bot.send_message(
            chat_id=user['user_id'],
            text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Å–≤–æ–µ —Ñ–æ—Ç–æ. –û–Ω–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ, –±—É–¥–µ—Ç —Ä–∞–∑–º—ã—Ç–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö,"
                 " –æ–Ω–∏ —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤–∞—à–µ —Ñ–æ—Ç–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ —Ö–æ–¥—É –æ–±—â–µ–Ω–∏—è —Å –≤–∞–º–∏.",
            reply_markup=REPLY_BACK_TO_MENU_FROM_PHOTO,
        )

def find_pair_in_base(user):
    users = mondb.Valentia22_users.find({'status': 1})

    users_len = users.count()
    print(users_len)

    if users_len <= 1:
        return None

    user_gender = user.get('user_gender')
    user_partn_gender = user.get('user_partn')
    user_course = user.get('user_course')

    must_come_pair = 0
    must_come_pair_data = 0.01

    max_must_come_pair_user = None
    max_must_come_pair_data = 0.01

    best_case = 3.0
    not_best_case = 2.0
    bad_case = 1.0

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ü–∏—Å–≥–µ–Ω–¥–µ—Ä –∏ –Ω–µ –î—Ä—É–≥–æ–π
    if user_gender == user_partn_gender and user_gender != 2:
        for come_user in users:
            if come_user['_id'] == user['_id']:
                continue
            # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π —é–∑–µ—Ä –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ –ø–æ–ª–∞ –∏ –Ω–µ –¥—Ä—É–≥–æ–π,
            if user_gender != come_user['user_gender'] and come_user['user_gender'] != 2:
                # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π —é–∑–µ—Ä —Ü–∏—Å–≥–µ–Ω–¥–µ—Ä
                if come_user['user_gender'] == come_user['user_partn'] and \
                        must_come_pair_data < best_case:
                    must_come_pair = come_user['user_id']
                    must_come_pair_data = best_case

                # –µ—Å–ª–∏ –≤—Ç–æ—Ä–æ–π —é–∑–µ—Ä –±–∏ –∏ –Ω–µ –¥—Ä—É–≥–æ–π
                elif come_user['user_partn'] == 2 and come_user['user_gender'] != 2 and \
                        must_come_pair_data < not_best_case:
                    must_come_pair = come_user['user_id']
                    must_come_pair_data = not_best_case
            # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–µ—Å–∞
            # –µ—Å–ª–∏ —é–∑–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö –ª–µ—Ç, —à—Ç—Ä–∞—Ñ 0.5
            if user_course != come_user['user_course']:
                must_come_pair_data -= 0.5
            # –ï—Å–ª–∏ —é–∑–µ—Ä—ã —É–∂–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–ª–∏—Å—å —à—Ç—Ä–∞—Ñ 1.5 –∑–∞ –∫–∞–∂–¥—É—é –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
            user_chat_hist = user['chat_history'].split()
            if must_come_pair_data > 0:
                for i in range(len(user_chat_hist)):
                    if user_chat_hist[i] == must_come_pair:
                        must_come_pair_data -= 1.5
                    if must_come_pair_data < 0.0:
                        must_come_pair = 0
                        must_come_pair_data = 0.0
                        break
            if must_come_pair_data > max_must_come_pair_data:
                max_must_come_pair_user = come_user
                max_must_come_pair_data = must_come_pair_data
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–º–æ—Å–µ–∫—Å—É–∞–ª
    elif user_partn_gender != user_gender and user_gender != 2:
        for come_user in users:
            if come_user['_id'] == user['_id']:
                continue
            # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π —é–∑–µ—Ä —Ç–æ–≥–æ –∂–µ –ø–æ–ª–∞ –∏ —Ç–æ–π –∂–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —Ç.–µ. –≥–æ–º–æ
            if come_user['user_gender'] == user_gender and come_user['user_partn'] == user_partn_gender and \
                    must_come_pair_data < best_case:
                must_come_pair = come_user['user_id']
                must_come_pair_data = best_case
            elif come_user['user_gender'] == user_gender and come_user['user_partn'] == 2 and \
                    must_come_pair_data < not_best_case:
                must_come_pair = come_user['user_id']
                must_come_pair_data = not_best_case
            # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥—Ä—É–≥–æ–π –∏ –±–∏ –∏–ª–∏ –∏—â–µ—Ç –ø–æ–ª —é–∑–µ—Ä–∞
            elif come_user['user_gender'] == 2 and come_user['user_partn'] == 2 or \
                    (come_user['user_partn'] != 2 and come_user['user_partn'] != user_gender) and \
                    must_come_pair_data < bad_case:
                must_come_pair = come_user['user_id']
                must_come_pair_data = bad_case

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–µ—Å–∞
            if user_course != come_user['user_course']:
                must_come_pair_data -= 0.5
                # –ï—Å–ª–∏ —é–∑–µ—Ä—ã —É–∂–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–ª–∏—Å—å —à—Ç—Ä–∞—Ñ 1.5 –∑–∞ –∫–∞–∂–¥—É—é –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
            user_chat_hist = user['chat_history'].split()
            if must_come_pair_data > 0:
                for i in range(len(user_chat_hist)):
                    if user_chat_hist[i] == must_come_pair:
                        must_come_pair_data -= 1.5
                    if must_come_pair_data < 0.0:
                        must_come_pair = 0
                        must_come_pair_data = 0.0
                        break
            if must_come_pair_data > max_must_come_pair_data:
                max_must_come_pair_user = come_user
                max_must_come_pair_data = must_come_pair_data
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–∏ –∏ –Ω–µ –¥—Ä—É–≥–æ–π
    elif user_partn_gender == 2 and user_gender != 2:
        for come_user in users:
            if come_user['_id'] == user['_id']:
                continue
            # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π —é–∑–µ—Ä —Ç–æ–∂–µ –±–∏
            if come_user['user_partn'] == 2 and \
                    must_come_pair_data < best_case:
                must_come_pair = come_user['user_id']
                must_come_pair_data = best_case
            # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π —é–∑–µ—Ä –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ –ø–æ–ª–∞ –∏–ª–∏ —Ç–æ–≥–æ –∂–µ –ø–æ–ª–∞ –Ω–æ –≥–æ–º–æ
            elif come_user['user_gender'] != user_gender or \
                    (come_user['user_gender'] == user_gender and come_user['user_partn'] != come_user[
                        'user_gender']) and \
                    must_come_pair_data < not_best_case:
                must_come_pair = come_user['user_id']
                must_come_pair_data = not_best_case

            if user_course != come_user['user_course']:
                must_come_pair_data -= 0.5
            # –ï—Å–ª–∏ —é–∑–µ—Ä—ã —É–∂–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–ª–∏—Å—å —à—Ç—Ä–∞—Ñ 1.5 –∑–∞ –∫–∞–∂–¥—É—é –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
            user_chat_hist = user['chat_history'].split()
            if must_come_pair_data > 0:
                for i in range(len(user_chat_hist)):
                    if user_chat_hist[i] == must_come_pair:
                        must_come_pair_data -= 1.5
                    if must_come_pair_data < 0.0:
                        must_come_pair = 0
                        must_come_pair_data = 0.0
                        break
            if must_come_pair_data > max_must_come_pair_data:
                max_must_come_pair_user = come_user
                max_must_come_pair_data = must_come_pair_data
    # –ï—Å–ª–∏ –¥—Ä—É–≥–æ–π
    elif user_gender == 2:
        for come_user in users:
            if come_user['_id'] == user['_id']:
                continue
            # –ï—Å–ª–∏ –æ–±–∞ –¥—Ä—É–≥–∏–µ
            if come_user['user_gender'] == 2 and must_come_pair_data < best_case:
                must_come_pair = come_user['user_id']
                must_come_pair_data = best_case
            # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π —é–∑–µ—Ä –Ω–µ —Å–≤–æ–µ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
            elif come_user['user_partn'] != come_user['user_gender'] and must_come_pair_data < not_best_case:
                must_come_pair = come_user['user_id']
                must_come_pair_data = not_best_case

            if user_course != come_user['user_course']:
                must_come_pair_data -= 0.5
            # –ï—Å–ª–∏ —é–∑–µ—Ä—ã —É–∂–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–ª–∏—Å—å —à—Ç—Ä–∞—Ñ 1.5 –∑–∞ –∫–∞–∂–¥—É—é –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
            user_chat_hist = user['chat_history'].split()
            if must_come_pair_data > 0:
                for i in range(len(user_chat_hist)):
                    if user_chat_hist[i] == must_come_pair:
                        must_come_pair_data -= 1.5
                    if must_come_pair_data < 0.0:
                        must_come_pair = 0
                        must_come_pair_data = 0.0
                        break
            if must_come_pair_data > max_must_come_pair_data:
                max_must_come_pair_user = come_user
                max_must_come_pair_data = must_come_pair_data
    return max_must_come_pair_user

def connect_users(user, pair_id):
    if len(user['chat_history'].split())<5:
        mondb.Valentia22_users.update_one(
            {'_id': user['_id']},
            {'$set': {'status': 2,
                      'left_message': 14,
                      'partner': pair_id,
                      'like_partner': 0,
                      'chat_history': user['chat_history'] + " " + str(pair_id)}
            })
        pair = mondb.Valentia22_users.find_one({"user_id": pair_id})
        mondb.Valentia22_users.update_one(
            {'_id': pair['_id']},
            {'$set': {'status': 2,
                      'left_message': 14,
                      'like_partner': 0,
                      'partner': user['user_id'],
                      'chat_history': pair['chat_history'] + " " + str(user['user_id'])}}
        )
    else:
        mylist = user['chat_history'].split()
        del mylist[0]
        mystr = " "
        mystr = mystr.join(mylist)
        mondb.Valentia22_users.update_one(
            {'_id': user['_id']},
            {'$set': {'status': 2,
                      'left_message': 14,
                      'partner': pair_id,
                      'like_partner': 0,
                      'chat_history': mystr + " " + str(pair_id)}
             })
        pair = mondb.Valentia22_users.find_one({"user_id": pair_id})
        mondb.Valentia22_users.update_one(
            {'_id': pair['_id']},
            {'$set': {'status': 2,
                      'left_message': 14,
                      'like_partner': 0,
                      'partner': user['user_id'],
                      'chat_history': mystr + " " + str(user['user_id'])}}
        )
    return True

def main():
    updater = Updater(
        token=TG_TOKEN,
        use_context=True,
    )

    logging.info("Altair8 started")
    # Commands handler add, IF you u need add new command use it
    dp = updater.dispatcher
    dp.add_handler(CommandHandler('start', on_start))
    # dp.add_handler(CommandHandler('research', comm_research))
    dp.add_handler(CommandHandler('advert', comm_advert))
    dp.add_handler(CallbackQueryHandler(callback=keyboard_call_handler, pass_chat_data=True))
    dp.add_handler(MessageHandler(Filters.sticker, handle_sticker))
    dp.add_handler(MessageHandler(Filters.contact, on_contact))
    dp.add_handler(MessageHandler(Filters.photo, get_photo))
    dp.add_handler(MessageHandler(Filters.text, handle_text))
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
